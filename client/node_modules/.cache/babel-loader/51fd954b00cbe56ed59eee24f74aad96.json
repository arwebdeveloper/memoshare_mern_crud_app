{"ast":null,"code":"import * as api from '../../api';\nimport { CREATE, DELETE, END_LOADING, FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, LIKE, START_LOADING, UPDATE } from '../constants'; //action create => function that return an action:\n\nexport const getPost = id => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(id);\n    dispatch({\n      type: FETCH_POST,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPosts = page => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.fetchPost(page);\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostsBySearch(searchQuery);\n    dispatch({\n      type: FETCH_BY_SEARCH,\n      payload: data\n    });\n    dispatch({\n      type: END_LOADING\n    });\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPosts = post => async dispatch => {\n  try {\n    console.log('postcreate', post);\n    dispatch({\n      type: START_LOADING\n    });\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    console.log('hellopoooooo');\n    const {\n      data\n    } = await api.updatePost(id, post);\n    console.log('dataUpdatePost', data);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    console.log('id========', id);\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/macbookair/Desktop/memory-mernStack-app/client/src/redux_store/actions/posts.js"],"names":["api","CREATE","DELETE","END_LOADING","FETCH_ALL","FETCH_BY_SEARCH","FETCH_POST","LIKE","START_LOADING","UPDATE","getPost","id","dispatch","type","data","fetchPost","payload","error","console","log","getPosts","page","getPostsBySearch","searchQuery","fetchPostsBySearch","createPosts","post","createPost","updatePost","deletePost","likePost"],"mappings":"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","sourcesContent":["import * as api from '../../api';\nimport { CREATE, DELETE, END_LOADING, FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, LIKE, START_LOADING, UPDATE } from '../constants';\n\n//action create => function that return an action:\n\nexport const getPost =(id)=> async(dispatch)=>{\n    try {\n        dispatch({type:START_LOADING})\n        const {data} = await api.fetchPost(id);\n        dispatch({type: FETCH_POST, payload: data});\n        dispatch({type: END_LOADING})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPosts =(page)=> async(dispatch)=>{\n    try {\n        dispatch({type:START_LOADING})\n        const {data} = await api.fetchPost(page);\n        dispatch({type: FETCH_ALL, payload: data});\n        dispatch({type: END_LOADING})\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPostsBySearch =(searchQuery)=> async(dispatch)=>{\n    try {\n        dispatch({type:START_LOADING});\n        const {data : {data}} = await api.fetchPostsBySearch(searchQuery);\n        dispatch({type: FETCH_BY_SEARCH, payload: data});\n        dispatch({type: END_LOADING})\n        console.log(data);\n    } catch (error) {\n        console.log(error )\n    }\n}\n\nexport const createPosts =(post)=> async(dispatch)=>{\n    try {\n        console.log('postcreate', post)\n        dispatch({type:START_LOADING});\n        const {data} = await api.createPost(post);\n        dispatch({type: CREATE, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost = (id,post)=> async (dispatch)=>{\n    try{\n        console.log('hellopoooooo')\n        const {data} = await api.updatePost(id,post);\n\n        console.log('dataUpdatePost',data)\n        dispatch({type: UPDATE, payload: data})\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const deletePost =(id)=> async (dispatch)=>{\n    try{\n        await api.deletePost(id);\n\n        dispatch({type: DELETE, payload: id});\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const likePost =(id)=> async (dispatch)=>{\n    try {\n        console.log('id========',id)\n        const {data} = await api.likePost(id);\n\n        dispatch({type: LIKE, payload: data})\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}