{"ast":null,"code":"import _toConsumableArray from\"/Users/macbookair/Desktop/memory-mernStack-app/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{CREATE,DELETE,FETCH_ALL,LIKE,UPDATE}from\"../constants\";var initialState=[];export var postsReducer=function postsReducer(){var posts=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;//here post is our state\nswitch(action.type){case FETCH_ALL:return action.payload;case CREATE:return[].concat(_toConsumableArray(posts),[action.payload]);case UPDATE:case LIKE:return posts.map(function(post){return post._id===action.payload._id?action.payload:post;});case DELETE:return posts.filter(function(post){return post._id!==action.payload;});default:return posts;}};","map":{"version":3,"sources":["/Users/macbookair/Desktop/memory-mernStack-app/client/src/redux_store/reducers/postsReducer.js"],"names":["CREATE","DELETE","FETCH_ALL","LIKE","UPDATE","initialState","postsReducer","posts","action","type","payload","map","post","_id","filter"],"mappings":"oLAAA,OAASA,MAAT,CAAiBC,MAAjB,CAAyBC,SAAzB,CAAoCC,IAApC,CAA0CC,MAA1C,KAAwD,cAAxD,CAEA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CACA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,EAAkC,IAAjCC,CAAAA,KAAiC,2DAAzBF,YAAyB,IAAXG,CAAAA,MAAW,2CAC5D;AACA,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKP,CAAAA,SAAL,CACE,MAAOM,CAAAA,MAAM,CAACE,OAAd,CACF,IAAKV,CAAAA,MAAL,CACE,mCAAWO,KAAX,GAAkBC,MAAM,CAACE,OAAzB,GACF,IAAKN,CAAAA,MAAL,CACA,IAAKD,CAAAA,IAAL,CACE,MAAOI,CAAAA,KAAK,CAACI,GAAN,CAAU,SAACC,IAAD,QACfA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACE,OAAP,CAAeG,GAA5B,CAAkCL,MAAM,CAACE,OAAzC,CAAmDE,IADpC,EAAV,CAAP,CAGF,IAAKX,CAAAA,MAAL,CACE,MAAOM,CAAAA,KAAK,CAACO,MAAN,CAAa,SAACF,IAAD,QAAUA,CAAAA,IAAI,CAACC,GAAL,GAAaL,MAAM,CAACE,OAA9B,EAAb,CAAP,CACF,QACE,MAAOH,CAAAA,KAAP,CAbJ,CAeD,CAjBM","sourcesContent":["import { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE } from \"../constants\";\n\nconst initialState = [];\nexport const postsReducer = (posts = initialState, action) => {\n  //here post is our state\n  switch (action.type) {\n    case FETCH_ALL:\n      return action.payload;\n    case CREATE:\n      return [...posts, action.payload];\n    case UPDATE:\n    case LIKE:\n      return posts.map((post) =>\n        post._id === action.payload._id ? action.payload : post\n      );\n    case DELETE:\n      return posts.filter((post) => post._id !== action.payload);\n    default:\n      return posts;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}