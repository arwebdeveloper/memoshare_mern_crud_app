{"ast":null,"code":"import * as api from '../../api';\nimport { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE } from '../constants'; //action create => function that return an action:\n\nexport const getPosts = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await api.fetchPost();\n    dispatch({\n      type: FETCH_ALL,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getPostsBySearch = searchQuery => async dispatch => {\n  try {\n    const {\n      data: {\n        data\n      }\n    } = await api.fetchPostBySearch(searchQuery);\n    console.log(data);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const createPosts = post => async dispatch => {\n  try {\n    console.log('postcreate', post);\n    const {\n      data\n    } = await api.createPost(post);\n    dispatch({\n      type: CREATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const updatePost = (id, post) => async dispatch => {\n  try {\n    console.log('hellopoooooo');\n    const {\n      data\n    } = await api.updatePost(id, post);\n    console.log('dataUpdatePost', data);\n    dispatch({\n      type: UPDATE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deletePost = id => async dispatch => {\n  try {\n    await api.deletePost(id);\n    dispatch({\n      type: DELETE,\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const likePost = id => async dispatch => {\n  try {\n    console.log('id========', id);\n    const {\n      data\n    } = await api.likePost(id);\n    dispatch({\n      type: LIKE,\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/macbookair/Desktop/memory-mernStack-app/client/src/redux_store/actions/posts.js"],"names":["api","CREATE","DELETE","FETCH_ALL","LIKE","UPDATE","getPosts","dispatch","data","fetchPost","type","payload","error","console","log","getPostsBySearch","searchQuery","fetchPostBySearch","createPosts","post","createPost","updatePost","id","deletePost","likePost"],"mappings":"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","sourcesContent":["import * as api from '../../api';\nimport { CREATE, DELETE, FETCH_ALL, LIKE, UPDATE } from '../constants';\n\n//action create => function that return an action:\n\nexport const getPosts =()=> async(dispatch)=>{\n    try {\n        const {data} = await api.fetchPost();\n        dispatch({type: FETCH_ALL, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const getPostsBySearch =(searchQuery)=> async(dispatch)=>{\n    try {\n        const {data : {data}} = await api.fetchPostBySearch(searchQuery);\n\n        console.log(data);\n    } catch (error) {\n        console.log(error )\n    }\n}\n\nexport const createPosts =(post)=> async(dispatch)=>{\n    try {\n        console.log('postcreate', post)\n        const {data} = await api.createPost(post);\n        dispatch({type: CREATE, payload: data});\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nexport const updatePost = (id,post)=> async (dispatch)=>{\n    try{\n        console.log('hellopoooooo')\n        const {data} = await api.updatePost(id,post);\n\n        console.log('dataUpdatePost',data)\n        dispatch({type: UPDATE, payload: data})\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const deletePost =(id)=> async (dispatch)=>{\n    try{\n        await api.deletePost(id);\n\n        dispatch({type: DELETE, payload: id});\n    }catch(error){\n        console.log(error)\n    }\n}\n\nexport const likePost =(id)=> async (dispatch)=>{\n    try {\n        console.log('id========',id)\n        const {data} = await api.likePost(id);\n\n        dispatch({type: LIKE, payload: data})\n    } catch (error) {\n        console.log(error)\n    }\n}"]},"metadata":{},"sourceType":"module"}