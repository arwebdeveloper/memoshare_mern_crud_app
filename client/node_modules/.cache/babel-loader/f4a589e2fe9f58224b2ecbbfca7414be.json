{"ast":null,"code":"import { COMMENT, CREATE, DELETE, END_LOADING, FETCH_ALL, FETCH_BY_SEARCH, FETCH_POST, LIKE, START_LOADING, UPDATE } from \"../constants\";\nconst initialState = {\n  isLoading: true,\n  posts: []\n};\nexport const postsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  //here post is our state\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state,\n        isLoading: true\n      };\n\n    case END_LOADING:\n      return { ...state,\n        isLoading: false\n      };\n\n    case FETCH_ALL:\n      return { ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages\n      };\n\n    case FETCH_BY_SEARCH:\n      return { ...state,\n        posts: action.payload\n      };\n\n    case FETCH_POST:\n      return { ...state,\n        post: action.payload\n      };\n\n    case CREATE:\n      return { ...state,\n        posts: [...state.posts, action.payload]\n      };\n\n    case UPDATE:\n    case LIKE:\n      return { ...state,\n        posts: state.posts.map(post => post._id === action.payload._id ? action.payload : post)\n      };\n\n    case COMMENT:\n      return { ...state,\n        posts: state.posts.map(post => {\n          if (post._id === action.payload._id) {\n            return action.payload;\n          }\n\n          return post;\n        })\n      };\n\n    case DELETE:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== action.payload)\n      };\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/macbookair/Desktop/memory-mernStack-app/client/src/redux_store/reducers/postsReducer.js"],"names":["COMMENT","CREATE","DELETE","END_LOADING","FETCH_ALL","FETCH_BY_SEARCH","FETCH_POST","LIKE","START_LOADING","UPDATE","initialState","isLoading","posts","postsReducer","state","action","type","payload","data","currentPage","numberOfPages","post","map","_id","filter"],"mappings":"AAAA,SACEA,OADF,EAEEC,MAFF,EAGEC,MAHF,EAIEC,WAJF,EAKEC,SALF,EAMEC,eANF,EAOEC,UAPF,EAQEC,IARF,EASEC,aATF,EAUEC,MAVF,QAWO,cAXP;AAaA,MAAMC,YAAY,GAAG;AAAEC,EAAAA,SAAS,EAAE,IAAb;AAAmBC,EAAAA,KAAK,EAAE;AAA1B,CAArB;AACA,OAAO,MAAMC,YAAY,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBJ,YAAyB;AAAA,MAAXK,MAAW;;AAC5D;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKR,aAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYH,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKR,WAAL;AACE,aAAO,EAAE,GAAGW,KAAL;AAAYH,QAAAA,SAAS,EAAE;AAAvB,OAAP;;AACF,SAAKP,SAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELF,QAAAA,KAAK,EAAEG,MAAM,CAACE,OAAP,CAAeC,IAFjB;AAGLC,QAAAA,WAAW,EAAEJ,MAAM,CAACE,OAAP,CAAeE,WAHvB;AAILC,QAAAA,aAAa,EAAEL,MAAM,CAACE,OAAP,CAAeG;AAJzB,OAAP;;AAMF,SAAKf,eAAL;AACE,aAAO,EAAE,GAAGS,KAAL;AAAYF,QAAAA,KAAK,EAAEG,MAAM,CAACE;AAA1B,OAAP;;AACF,SAAKX,UAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYO,QAAAA,IAAI,EAAEN,MAAM,CAACE;AAAzB,OAAP;;AACF,SAAKhB,MAAL;AACE,aAAO,EAAE,GAAGa,KAAL;AAAYF,QAAAA,KAAK,EAAE,CAAC,GAAGE,KAAK,CAACF,KAAV,EAAiBG,MAAM,CAACE,OAAxB;AAAnB,OAAP;;AACF,SAAKR,MAAL;AACA,SAAKF,IAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYU,GAAZ,CAAiBD,IAAD,IACrBA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAA5B,GAAkCR,MAAM,CAACE,OAAzC,GAAmDI,IAD9C;AAFF,OAAP;;AAMF,SAAKrB,OAAL;AACE,aAAO,EACL,GAAGc,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYU,GAAZ,CAAiBD,IAAD,IAAU;AAC/B,cAAIA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAP,CAAeM,GAAhC,EAAqC;AACnC,mBAAOR,MAAM,CAACE,OAAd;AACD;;AACD,iBAAOI,IAAP;AACD,SALM;AAFF,OAAP;;AASF,SAAKnB,MAAL;AACE,aAAO,EACL,GAAGY,KADE;AAELF,QAAAA,KAAK,EAAEE,KAAK,CAACF,KAAN,CAAYY,MAAZ,CAAoBH,IAAD,IAAUA,IAAI,CAACE,GAAL,KAAaR,MAAM,CAACE,OAAjD;AAFF,OAAP;;AAIF;AACE,aAAOH,KAAP;AA1CJ;AA4CD,CA9CM","sourcesContent":["import {\n  COMMENT,\n  CREATE,\n  DELETE,\n  END_LOADING,\n  FETCH_ALL,\n  FETCH_BY_SEARCH,\n  FETCH_POST,\n  LIKE,\n  START_LOADING,\n  UPDATE,\n} from \"../constants\";\n\nconst initialState = { isLoading: true, posts: [] };\nexport const postsReducer = (state = initialState, action) => {\n  //here post is our state\n  switch (action.type) {\n    case START_LOADING:\n      return { ...state, isLoading: true };\n    case END_LOADING:\n      return { ...state, isLoading: false };\n    case FETCH_ALL:\n      return {\n        ...state,\n        posts: action.payload.data,\n        currentPage: action.payload.currentPage,\n        numberOfPages: action.payload.numberOfPages,\n      };\n    case FETCH_BY_SEARCH:\n      return { ...state, posts: action.payload };\n    case FETCH_POST:\n      return { ...state, post: action.payload };\n    case CREATE:\n      return { ...state, posts: [...state.posts, action.payload] };\n    case UPDATE:\n    case LIKE:\n      return {\n        ...state,\n        posts: state.posts.map((post) =>\n          post._id === action.payload._id ? action.payload : post\n        ),\n      };\n    case COMMENT:\n      return {\n        ...state,\n        posts: state.posts.map((post) => {\n          if (post._id === action.payload._id) {\n            return action.payload;\n          }\n          return post;\n        }),\n      };\n    case DELETE:\n      return {\n        ...state,\n        posts: state.posts.filter((post) => post._id !== action.payload),\n      };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}